// Generated by CoffeeScript 1.6.3
(function() {
  var app, fs, generateChartData, io, rollDice, server, __dirname;

  app = require('express')();

  server = require('http').createServer(app);

  io = require('socket.io')(server);

  fs = require('fs');

  __dirname = '';

  server.listen(8000, function() {
    return console.log('listening');
  });

  app.get('/', function(req, res) {
    console.log('recieved request');
    return fs.readFile(__dirname + '../index.html', function(err, data) {
      if (err) {
        console.log('error');
        res.writeHead(500);
        return res.end('error loading index.html');
      } else {
        console.log('success');
        res.writeHead(200);
        return res.end(data);
      }
    });
  });

  rollDice = function() {
    return Math.floor(Math.random() * (0 + 200 - 1)) + 1;
  };

  generateChartData = function() {
    var barChartData;
    return barChartData = [
      {
        label: 'total1',
        value: rollDice()
      }, {
        label: 'total2',
        value: rollDice()
      }, {
        label: 'total3',
        value: rollDice()
      }, {
        label: 'total4',
        value: rollDice()
      }, {
        label: 'total5',
        value: rollDice()
      }
    ];
  };

  io.on('connection', function(socket) {
    /* this is just for testing it needs to be compiled with actual state of each pin  this could be done via a local database*/

    var int;
    socket.emit('init', generateChartData());
    console.log('connected');
    int = setInterval(function() {
      socket.emit('update', generateChartData());
      return console.log('update Sent');
    }, 10000);
    socket.on('updateComponent', function(data) {});
    return socket.on('disconnect', function() {
      return clearInterval(int);
      /* here is where you pu in all the magic to update the network device*/

    });
  });

}).call(this);
